#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { ApolloServer } = require('apollo-server-express')
const { ApolloServerPluginDrainHttpServer } = require('apollo-server-core')

const app = require('../app')
const debug = require('debug')('rps-frontend:server')
const http = require('http')

async function startApolloServer(typeDefs, resolvers) {
  // const app = express();
  const createError = require('http-errors')
  const port = normalizePort(process.env.PORT || '3000')
  app.set('port', port)
  const httpServer = http.createServer(app)
  const server = new ApolloServer({
    typeDefs,
    resolvers,
    plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
  })
  await server.start()
  server.applyMiddleware({ app })

  // catch 404 and forward to error handler
  app.use(function (req, res, next) {
    next(createError(404))
  })

  // error handler
  app.use(function (err, req, res, next) {
    // set locals, only providing error in development
    res.locals.message = err.message
    res.locals.error = req.app.get('env') === 'development' ? err : {}

    if (err.name === 'JsonWebTokenError') {
      return res.status(401).json({
        error: 'token missing or invalid',
      })
    }

    // render the error page
    res.status(err.status || 500)
    res.render('error')
  })

  await new Promise((resolve) => httpServer.listen(port, resolve))
  httpServer.on('error', onError)
  httpServer.on('listening', onListening)
  console.log(`ðŸš€ Server ready at http://localhost:3000${server.graphqlPath}`)
}
const typeDefs = require('../graphql/typeDefs')

// Provide resolver functions for your schema fields
const resolvers = require('../graphql/resolvers')

startApolloServer(typeDefs, resolvers)
/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000')
// app.set('port', port)

/**
 * Create HTTP server.
 */

// var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port)
// server.on('error', onError)
// server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
